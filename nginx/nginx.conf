worker_processes auto;
pid /run/nginx.pid;
#include /etc/nginx/modules-enabled/*.conf; # Uncomment if needed for your Nginx build

events {
    worker_connections 1024;
}


# Stream configuration for Stalwart
stream {
    upstream backend_smtp {
    	hash $remote_addr consistent;
	    server server1:1025;
	    server server2:1025;
    }  
    upstream backend_imaps {
	    hash $remote_addr consistent;
	    server server1:10993;
    	server server2:10993;
    }  
    upstream backend_smtps {
	    hash $remote_addr consistent;
	    server server1:10465;
  	  server server2:10465;
    }  
    upstream backend_submission {
	    hash $remote_addr consistent;
	    server server1:10587;
  	  server server2:10587;
    }  

    upstream backend_https {
	    hash $remote_addr consistent;
	    server server1:10443;
  	  server server2:10443;
    }  

    proxy_timeout 5m; # e.g., 5 minutes
    proxy_connect_timeout 10s;

    # Proxy SMTP
    server {
        listen 25;
        proxy_pass backend_smtp;
	proxy_protocol on;
    }

    # Proxy IMAPS
    server {
        listen 993;
        proxy_pass backend_imaps;
        proxy_protocol on;
    }

    # Proxy SMTPS
    server {
        listen 465;
        proxy_pass backend_smtps;
        proxy_protocol on;
    }

    # Proxy SUBMISSION
    server {
        listen 587;
        proxy_pass backend_submission;
        proxy_protocol on;
    }

    # Proxy HTTPS
    server {
        listen 443;
        proxy_pass backend_https;
    }

}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off; # Hide Nginx version

    # Gzip settings (optional)
    # gzip on;
    # gzip_disable "msie6";

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format (optional)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    # access_log /var/log/nginx/s3-access.log main;
    access_log off; # Disable access log for simplicity if not needed
    error_log /var/log/nginx/s3-error.log warn;

    # Define the upstream MinIO servers using the hostnames/IPs
    upstream minio_backend {
        # Least connections is often good for persistent connections like S3
        least_conn;
        server server1:9000;
        server server2:9000;
        server server3:9000;
        # Consider adding health checks if using Nginx Plus or a module
    }

    # Server block for MinIO API/S3 endpoint
    server {
        listen 81;
        # Replace with your actual domain name
        server_name s3.your.domain;

        # Allow large uploads (adjust as needed)
        client_max_body_size 5G; # Example: 5 Gigabytes

        location / {
            proxy_set_header Host $http_host; # Use $http_host instead of $host if issues occur
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Connection ""; # Clear connection header for upstream keepalives
            chunked_transfer_encoding on; # Required for S3 chunked uploads

            proxy_pass http://minio_backend; # Pass requests to the upstream group
        }
    }
}
